//
// Created by Daniel Hagen on 10.06.2024.
//

#ifndef SDFCREATOR_H
#define SDFCREATOR_H
#include "SDFObject.h"
#include "ShaderLoader.h"

#include <__filesystem/filesystem_error.h>
#include "raylib.h"

#ifdef PLATFORM_WEB
#define SHADER_VERSION_PREFIX "#version 300 es\nprecision highp float;"
#else
#define SHADER_VERSION_PREFIX "#version 330\n"
#endif

class SDFCreator
{
public:
    SDFCreator();
    void rebuildShaders();
    void addShape(Color color);
    void deleteSphere();
    void save(std::filesystem::path path);
    void openSnapshot(std::filesystem::path path);
    void exportObj();
    bool loadShader(const Camera& camera);
    void unloadShader();
    void loadData() const;
    inline void rebuild() {m_needs_rebuild = true;}
    void objectAtPixel(int x, int y, const Camera& camera);
    bool isSelected() const;
    std::optional<SDFObject*> getSelected();
    static Vector3 WorldToCamera(Vector3 worldPos, Matrix cameraMatrix);
    static Vector3 VectorProjection(const Vector3 vectorToProject, const Vector3 targetVector);
    static Vector3 CameraToWorld(Vector3 worldPos, Matrix cameraMatrix);
    static Vector3 NearestPointOnLine(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4);
    static BoundingBox boundingBoxSized(Vector3 center, float size);
    static BoundingBox shapeBoundingBox(SDFObject s);
    static Vector3 VertexInterp(Vector4 p1, Vector4 p2, float threshold);
    int RayPlaneIntersection(const Vector3 RayOrigin, const Vector3 RayDirection, const Vector3 PlanePoint,
                     const Vector3 PlaneNormal, Vector3* IntersectionPoint);
private:
    struct
    {
        int view_eye;
        int view_center;
        int run_time;
        int resolution;
        int selected_params;
        int visualizer;
    } m_main_locations {};
    enum
    {
        VISUALS_NONE,
        VISUALS_SDF,
    } visuals_mode;


    std::vector<SDFObject> m_objects{};
    bool m_needs_rebuild = true;
    int m_num_spheres = 0;
    int m_selected_sphere = -1;
    double m_last_save = 0;
    Shader m_main_shader{};
    ShaderLoader m_shader_files{};
    float m_run_time = 0.0f;
    void appendMapFunction(std::string& result, bool use_color_as_index, int dynamic_index) const;
    static constexpr const char* vshader = SHADER_VERSION_PREFIX "\n in vec3 vertexPosition;    \n"
                                            "in vec2 vertexTexCoord;            \n"
                                            "out vec2 fragTexCoord;             \n"
                                            "uniform mat4 mvp;                  \n"
                                            "void main()                        \n"
                                            "{                                  \n"
                                            "    fragTexCoord = vertexTexCoord; \n"
                                            "    gl_Position = mvp*vec4(vertexPosition, 1.0); \n"
                                            "}                                  \n";

    // from https://paulbourke.net/geometry/polygonise/
    static constexpr int edgeTable[256] = {
        0x0,   0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c, 0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
        0x190, 0x99,  0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c, 0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
        0x230, 0x339, 0x33,  0x13a, 0x636, 0x73f, 0x435, 0x53c, 0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
        0x3a0, 0x2a9, 0x1a3, 0xaa,  0x7a6, 0x6af, 0x5a5, 0x4ac, 0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
        0x460, 0x569, 0x663, 0x76a, 0x66,  0x16f, 0x265, 0x36c, 0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
        0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff,  0x3f5, 0x2fc, 0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
        0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55,  0x15c, 0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
        0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,  0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
        0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc, 0xcc,  0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
        0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c, 0x15c, 0x55,  0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
        0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc, 0x2fc, 0x3f5, 0xff,  0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
        0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c, 0x36c, 0x265, 0x16f, 0x66,  0x76a, 0x663, 0x569, 0x460,
        0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac, 0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa,  0x1a3, 0x2a9, 0x3a0,
        0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c, 0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33,  0x339, 0x230,
        0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c, 0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99,  0x190,
        0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c, 0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0};
    static constexpr int triTable[256][16] = {{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1},
                                              {3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1},
                                              {3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1},
                                              {3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
                                              {2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1},
                                              {8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
                                              {4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1},
                                              {3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1},
                                              {4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1},
                                              {4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
                                              {5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1},
                                              {2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1},
                                              {9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
                                              {2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1},
                                              {10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1},
                                              {4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1},
                                              {5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1},
                                              {5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1},
                                              {10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1},
                                              {8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1},
                                              {2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1},
                                              {7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1},
                                              {2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1},
                                              {11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1},
                                              {5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1},
                                              {11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1},
                                              {11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1},
                                              {5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1},
                                              {2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
                                              {5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1},
                                              {6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1},
                                              {3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1},
                                              {6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1},
                                              {5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
                                              {10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1},
                                              {6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1},
                                              {8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1},
                                              {7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1},
                                              {3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
                                              {5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1},
                                              {0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1},
                                              {9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1},
                                              {8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1},
                                              {5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1},
                                              {0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1},
                                              {6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1},
                                              {10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1},
                                              {10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1},
                                              {8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1},
                                              {1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1},
                                              {3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1},
                                              {0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1},
                                              {10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1},
                                              {3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1},
                                              {6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1},
                                              {9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1},
                                              {8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1},
                                              {3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1},
                                              {6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1},
                                              {10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1},
                                              {10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1},
                                              {2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1},
                                              {7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1},
                                              {7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1},
                                              {2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1},
                                              {1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1},
                                              {11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1},
                                              {8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1},
                                              {0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1},
                                              {7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
                                              {10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
                                              {2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
                                              {6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1},
                                              {7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1},
                                              {2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1},
                                              {10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1},
                                              {10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1},
                                              {0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1},
                                              {7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1},
                                              {6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1},
                                              {8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1},
                                              {6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1},
                                              {4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1},
                                              {10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1},
                                              {8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1},
                                              {1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1},
                                              {8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1},
                                              {10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1},
                                              {4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1},
                                              {10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
                                              {5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
                                              {11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1},
                                              {9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
                                              {6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1},
                                              {7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1},
                                              {3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1},
                                              {7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1},
                                              {3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1},
                                              {6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1},
                                              {9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1},
                                              {1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1},
                                              {4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1},
                                              {7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1},
                                              {6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1},
                                              {3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1},
                                              {0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1},
                                              {6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1},
                                              {0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1},
                                              {11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1},
                                              {6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1},
                                              {5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1},
                                              {9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1},
                                              {1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1},
                                              {10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1},
                                              {0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1},
                                              {5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1},
                                              {10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1},
                                              {11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1},
                                              {9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1},
                                              {7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1},
                                              {2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1},
                                              {8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1},
                                              {9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1},
                                              {9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1},
                                              {1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1},
                                              {5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1},
                                              {0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1},
                                              {10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1},
                                              {2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1},
                                              {0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1},
                                              {0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1},
                                              {9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1},
                                              {5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1},
                                              {3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1},
                                              {5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1},
                                              {8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1},
                                              {9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1},
                                              {1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1},
                                              {3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1},
                                              {4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1},
                                              {9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1},
                                              {11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1},
                                              {11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1},
                                              {2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1},
                                              {9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1},
                                              {3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1},
                                              {1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1},
                                              {4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1},
                                              {4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
                                              {3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1},
                                              {3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1},
                                              {0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1},
                                              {9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1},
                                              {1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                                              {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}};

   inline static std::string test { "#version 330\n"
"out vec4 finalColor;\n"
"uniform vec3 viewEye;\n"
"uniform vec3 viewCenter;\n"
"uniform float runTime;\n"
"uniform float visualizer;\n"
"uniform vec2 resolution;\n"
"float sdRoundBox( vec3 p, vec3 b, float r )\n"
"{\n"
"  vec3 q = abs(p) - b;\n"
"  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n"
"}\n"
"\n"
"float RoundBox( vec3 p, vec3 b, float r )\n"
"{\n"
"  vec3 q = abs(p) - b;\n"
"  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n"
"}\n"
"\n"
"\n"
"vec4 opSmoothUnion( vec4 a, vec4 b, float blend )\n"
"{\n"
"    float h =  max( blend-abs(a.x-b.x), 0.0 )/blend;\n"
"    float m = h*h*0.5;\n"
"    float s = m*blend*(1.0/2.0);\n"
"    return (a.x<b.x) ? vec4(a.x-s,mix(a.gba,b.gba,m)) : vec4(b.x-s,mix(a.gba,b.gba,1.0-m));\n"
"}\n"
"\n"
"vec4 BlobbyMin( vec4 a, vec4 b, float blend )\n"
"{\n"
"    float h =  max( blend-abs(a.x-b.x), 0.0 )/blend;\n"
"    float m = h*h*0.5;\n"
"    float s = m*blend*(1.0/2.0);\n"
"    return (a.x<b.x) ? vec4(a.x-s,mix(a.gba,b.gba,m)) : vec4(b.x-s,mix(a.gba,b.gba,1.0-m));\n"
"}\n"
"\n"
"vec4 Min( vec4 a, vec4 b )\n"
"{\n"
"    return (a.x<b.x) ? a : b;\n"
"}\n"
"\n"
"vec4 opSmoothUnionSteppedColor( vec4 a, vec4 b, float blend )\n"
"{\n"
"    float h =  max( blend-abs(a.x-b.x), 0.0 )/blend;\n"
"    float m = h*h*0.5;\n"
"    float s = m*blend*(1.0/2.0);\n"
"    return (a.x<b.x) ? vec4(a.x-s,a.gba) : vec4(b.x-s,b.gba);\n"
"}\n"
"\n"
"vec4 opSmoothSubtraction( vec4 d1, vec4 d2, float k ) {\n"
"    float dist = opSmoothUnion(d1,vec4(-d2.x, d2.gba),k).x;\n"
"    return vec4(-dist, d2.gba);\n"
"}\n"
"\n"
"vec4 opS( vec4 d1, vec4 d2 )\n"
"{\n"
"    return vec4(max(-d2.x,d1.x), d1.gba);\n"
"}\n"
"\n"
"vec4 opU( vec4 d1, vec4 d2 )\n"
"{\n"
"    return (d1.x<d2.x) ? d1 : d2;\n"
"}\n"
"\n"
"vec3 opSymX( vec3 p )\n"
"{\n"
"    p.x = abs(p.x);\n"
"    return p;\n"
"}\n"
"vec3 opSymY( vec3 p )\n"
"{\n"
"    p.y = abs(p.y);\n"
"    return p;\n"
"}\n"
"vec3 opSymZ( vec3 p )\n"
"{\n"
"    p.z = abs(p.z);\n"
"    return p;\n"
"}\n"
"vec3 opSymXY( vec3 p )\n"
"{\n"
"    p.xy = abs(p.xy);\n"
"    return p;\n"
"}\n"
"vec3 opSymXZ( vec3 p )\n"
"{\n"
"    p.xz = abs(p.xz);\n"
"    return p;\n"
"}\n"
"vec3 opSymYZ( vec3 p )\n"
"{\n"
"    p.yz = abs(p.yz);\n"
"    return p;\n"
"}\n"
"vec3 opSymXYZ( vec3 p )\n"
"{\n"
"    p.xyz = abs(p.xyz);\n"
"    return p;\n"
"}\n"
"\n"
"vec3 opRotateXYZ( vec3 p, vec3 theta)\n"
"{\n"
"    float cz = cos(theta.z);\n"
"    float sz = sin(theta.z);\n"
"    float cy = cos(theta.y);\n"
"    float sy = sin(theta.y);\n"
"    float cx = cos(theta.x);\n"
"    float sx = sin(theta.x);\n"
"\n"
"    mat3 mat = mat3(\n"
"                cz*cy,\n"
"                cz*sy*sx - cx*sz,\n"
"                sz*sx + cz*cx*sy,\n"
"\n"
"                cy*sz,\n"
"                cz*cx + sz*sy*sx,\n"
"                cx*sz*sy - cz*sx,\n"
"\n"
"                -sy,\n"
"                cy*sx,\n"
"                cy*cx);\n"
"\n"
"    return mat*p;\n"
"}\n"
"\n"
"\n"
"\n"
"uniform vec3 selectionValues[5];\n"
"\n"
"vec4 signed_distance_field( in vec3 pos ){\n"
"        vec4 distance = vec4(999999.,0,0,0);\n"
"        distance = Min(\n"
"                vec4(RoundBox(\n"
"                                ((pos) - vec3(0,0,0)), // position\n"
"                        vec3(0.99,0.99,0.99),// size\n"
"                        0.01), // corner radius\n"
"                        0.937255,0.627451,0.360784), // color\n"
"                distance);\n"
"        distance = BlobbyMin(\n"
"                vec4(RoundBox(\n"
"                                opRotateXYZ(\n"
"                                        (pos) - selectionValues[0], // position\n"
"                                        selectionValues[1]), // angle\n"
"                                selectionValues[2],  // size\n"
"                                selectionValues[4].x), // corner radius\n"
"                        selectionValues[3]), // color\n"
"                distance,\n"
"                selectionValues[4].y); // blobbyness\n"
"        return distance;\n"
"}\n"
"vec4 castRay( in vec3 ro, in vec3 rd )\n"
"{\n"
"    float tmin = 0.1;\n"
"    float tmax = 300.0;\n"
"\n"
"    float t = tmin;\n"
"    vec3 m = vec3(-1);\n"
"    for( int i=0; i<64; i++ )\n"
"    {\n"
"        float precis = 0.0001*t;\n"
"        vec4 res = signed_distance_field( ro+rd*t );\n"
"        if( res.x<precis || t>tmax ) break;\n"
"        t += res.x;\n"
"        m = res.gba;\n"
"    }\n"
"\n"
"    if( t>tmax ) m=vec3(-1);\n"
"    return vec4( t, m );\n"
"}\n"
"\n"
"\n"
"float calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n"
"{\n"
"    float res = 1.0;\n"
"    float t = mint;\n"
"    for( int i=0; i<16; i++ )\n"
"    {\n"
"        float h = signed_distance_field( ro + rd*t ).x;\n"
"        res = min( res, 8.0*h/t );\n"
"        t += clamp( h, 0.02, 0.10 );\n"
"        if( h<0.001 || t>tmax ) break;\n"
"    }\n"
"    return clamp( res, 0.0, 1.0 );\n"
"}\n"
"\n"
"vec3 calcNormal( in vec3 pos )\n"
"{\n"
"    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n"
"    return normalize( e.xyy*signed_distance_field( pos + e.xyy ).x +\n"
"                      e.yyx*signed_distance_field( pos + e.yyx ).x +\n"
"                      e.yxy*signed_distance_field( pos + e.yxy ).x +\n"
"                      e.xxx*signed_distance_field( pos + e.xxx ).x );\n"
"    /*\n"
"    vec3 eps = vec3( 0.0005, 0.0, 0.0 );\n"
"    vec3 nor = vec3(\n"
"        signed_distance_field(pos+eps.xyy).x - signed_distance_field(pos-eps.xyy).x,\n"
"        signed_distance_field(pos+eps.yxy).x - signed_distance_field(pos-eps.yxy).x,\n"
"        signed_distance_field(pos+eps.yyx).x - signed_distance_field(pos-eps.yyx).x );\n"
"    return normalize(nor);\n"
"    */\n"
"}\n"
"\n"
"float calcAO( in vec3 pos, in vec3 nor )\n"
"{\n"
"    float occ = 0.0;\n"
"    float sca = 1.0;\n"
"    for( int i=0; i<5; i++ )\n"
"    {\n"
"        float hr = 0.01 + 0.12*float(i)/4.0;\n"
"        vec3 aopos =  nor * hr + pos;\n"
"        float dd = signed_distance_field( aopos ).x;\n"
"        occ += -(dd-hr)*sca;\n"
"        sca *= 0.95;\n"
"    }\n"
"    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );\n"
"}\n"
"\n"
"vec3 render( in vec3 ro, in vec3 rd )\n"
"{\n"
"    vec3 color =\n"
"#ifdef FALSE_COLOR_MODE\n"
"    vec3(0.);\n"
"#else\n"
"    vec3(0.4, 0.5, 0.6) +rd.y*0.4;\n"
"#endif\n"
"    vec4 result = castRay(ro,rd);\n"
"    float t = result.x;\n"
"    vec3 m = result.yzw;\n"
"    if( m.r>-0.5 )\n"
"    {\n"
"        vec3 pos = ro + t*rd;\n"
"        vec3 nor = calcNormal( pos );\n"
"        // vec3 ref = reflect( rd, nor );\n"
"\n"
"        // material\n"
"        color = m;\n"
"\n"
"        #ifndef FALSE_COLOR_MODE\n"
"\n"
"        // lighting\n"
"        // float occ = calcAO( pos, nor );\n"
"        vec3  light_dir = normalize( vec3(cos(-0.4), sin(0.7), -0.6) );\n"
"        vec3  hal = normalize( light_dir-rd );\n"
"        float ambient = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n"
"        float diffuse = clamp( dot( nor, light_dir ), 0.0, 1.0 );\n"
"        float back_light = clamp( dot( nor, normalize(vec3(-light_dir.x,0.0,-light_dir.z))), 0.0, 1.0 )*clamp( 1.0-pos.y\n"
",0.0,1.0);\n"
"\n"
"        // TODO: turn back on shadows\n"
"        diffuse *= calcSoftshadow( pos, light_dir, 0.02, 2.5 );\n"
"\n"
"        float spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0)*\n"
"                    diffuse *\n"
"                    (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n"
"\n"
"        vec3 lin = vec3(0.0);\n"
"        lin += 1.30*diffuse*vec3(1.00,0.80,0.55);\n"
"        lin += 0.40*ambient*vec3(0.40,0.60,1.00);//*occ;\n"
"        lin += 0.50*back_light*vec3(0.25,0.25,0.25);//*occ;\n"
"        color = color*lin;\n"
"        color += 10.00*spe*vec3(1.00,0.90,0.70);\n"
"        #endif\n"
"    }\n"
"\n"
"    return vec3( clamp(color,0.0,1.0) );\n"
"}\n"
"\n"
"mat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n"
"{\n"
"    vec3 cw = normalize(ta-ro);\n"
"    vec3 cp = vec3(sin(cr), cos(cr),0.0);\n"
"    vec3 cu = normalize( cross(cw,cp) );\n"
"    vec3 cv = normalize( cross(cu,cw) );\n"
"    return mat3( cu, cv, cw );\n"
"}\n"
"\n"
"// plane.xyz must be normalized\n"
"float planeIntersect( in vec3 ro, in vec3 rd, in vec4 plane )  {\n"
"    return -(dot(ro,plane.xyz)+plane.w)/dot(rd,plane.xyz);\n"
"}\n"
"\n"
"void main()\n"
"{\n"
"    vec3 tot = vec3(0.0);\n"
"// TODO:  turn back on AA\n"
"#define AA 1\n"
"#if AA>1\n"
"    for( int m=0; m<AA; m++ )\n"
"    for( int n=0; n<AA; n++ )\n"
"    {\n"
"        // pixel coordinates\n"
"        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n"
"        vec2 p = (-resolution.xy + 2.0*(gl_FragCoord.xy+o))/resolution.y;\n"
"#else\n"
"        vec2 p = (-resolution.xy + 2.0*gl_FragCoord.xy)/resolution.y;\n"
"#endif\n"
"\n"
"        vec3 ro = viewEye;\n"
"        vec3 ta = viewCenter;\n"
"\n"
"        mat3 camera_to_world = setCamera( ro, ta, 0.0 );\n"
"        vec3 ray_direction = camera_to_world * normalize( vec3(p.xy,2.0) );\n"
"\n"
"        vec3 col = render( ro, ray_direction );\n"
"\n"
"        col = pow( col, vec3(0.4545) ); // gamma\n"
"\n"
"        if (visualizer > 0.) {\n"
"            float dist = planeIntersect(ro, ray_direction, vec4(0,0,1.,0));\n"
"            if (dist > 0.) {\n"
"                vec3 t = ro + dist*ray_direction;\n"
"                float sdf_value = signed_distance_field(t).x;\n"
"                vec4 field_color = (sdf_value < 0. ?\n"
"                                    vec4(1.,0.,0., sin(sdf_value*8.+runTime*2.)/4. + 0.25):\n"
"                                    vec4(0.15, 0.15,0.8,sin(sdf_value*8.-runTime*2.)/4. + 0.25 )) ;\n"
"\n"
"                col = mix(col, field_color.rgb, field_color.a);\n"
"            }\n"
"        }\n"
"\n"
"        tot += col;\n"
"#if AA>1\n"
"    }\n"
"    tot /= float(AA*AA);\n"
"#endif\n"
"\n"
"    finalColor = vec4( tot, 1.0 );\n"
"}\n"};
};
#endif // SDFCREATOR_H
